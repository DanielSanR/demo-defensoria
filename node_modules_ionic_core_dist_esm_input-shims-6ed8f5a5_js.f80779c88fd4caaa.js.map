{"version":3,"file":"node_modules_ionic_core_dist_esm_input-shims-6ed8f5a5_js.f80779c88fd4caaa.js","mappings":"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","names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","SKIP_SELECTOR","jsSetFocus","contentEl","footerEl","keyboardHeight","scrollData","_a","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","calcScrollData","closest","getBoundingClientRect","defaultView","innerHeight","getScrollData","focus","raf","click","window","scrollContentTimeout","scrollContent","undefined","clearTimeout","removeEventListener","doubleKeyboardEventListener","scrollByPoint","addEventListener","scrollEl","getScrollElement","scrollHeight","clientHeight","scrollTop","type","setTimeout","PADDING_TIMER_KEY","setScrollPadding","_b","tagName","parentElement","el","findClosestIonContent","timer","setProperty","startInputShims","config","doc","document","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","Promise","resolve","componentOnReady","inputRoot","shadowRoot","querySelector","rmFn","scrollHideCaret","shouldHideCaret","onBlur","showCaret","enableHideCaretOnScroll","coord","touchStart","ev","pointerCoord","touchEnd","endCoord","threshold","startCoord","deltaX","x","deltaY","y","hasPointerMoved","capture","passive","enableScrollAssist","focused","didScroll","active","matches","tapped","target","blur","enableInputBlurring","enableScrollPadding","detail","fn","unregisterInput"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/input-shims-6ed8f5a5.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, f as findClosestIonContent } from './index-5d0c8232.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, p as pointerCoord, c as componentOnReady } from './helpers-3b390e48.js';\nimport './index-c4b11676.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.addEventListener('ionBlur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom * 0.75;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n  let coord;\n  const touchStart = (ev) => {\n    coord = pointerCoord(ev);\n  };\n  const touchEnd = (ev) => {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    }\n    // get where the touchend/mouseup ended\n    const endCoord = pointerCoord(ev);\n    // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      // begin the input focus process\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight);\n    }\n  };\n  componentEl.addEventListener('touchstart', touchStart, { capture: true, passive: true });\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return () => {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n  inputEl.focus();\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      inputEl.focus();\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += 50;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n  if (startCoord && endCoord) {\n    const deltaX = startCoord.x - endCoord.x;\n    const deltaY = startCoord.y - endCoord.y;\n    const distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > threshold * threshold;\n  }\n  return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n  const doc = document;\n  const onFocusin = (ev) => {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n  const onFocusout = (ev) => {\n    setScrollPadding(ev.target, 0);\n  };\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return () => {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n  var _a, _b;\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n  if (((_b = (_a = input.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.tagName) === 'ION-SEARCHBAR') {\n    return;\n  }\n  const el = findClosestIonContent(input);\n  if (el === null) {\n    return;\n  }\n  const timer = el[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n  }\n  else {\n    el[PADDING_TIMER_KEY] = setTimeout(() => {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config) => {\n  const doc = document;\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', true);\n  const inputBlurring = config.getBoolean('inputBlurring', true);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"x_google_ignoreList":[0]}